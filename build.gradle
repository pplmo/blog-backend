plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.graalvm.buildtools.native' version '0.9.18'
    /* Referenced from https://github.com/spring-projects/spring-restdocs/tree/master/samples/web-test-client */
    /* for Spring Restdocs */
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    /* for OpenAPI */
    id "com.github.johnrengelman.processes" version "0.5.0"
    id "org.springdoc.openapi-gradle-plugin" version "1.5.0"
    /* generate image and then push it to DockerHub */
    id 'com.google.cloud.tools.jib' version '3.3.1'
    id "org.sonarqube" version "3.5.0.2730"
}

group = 'team.star'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '19'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExtensions
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springdoc:springdoc-openapi-webflux-ui:1.6.13'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'org.postgresql:r2dbc-postgresql'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    /* for rest docs */
    testImplementation "org.springframework.restdocs:spring-restdocs-webtestclient"
    asciidoctorExtensions "org.springframework.restdocs:spring-restdocs-asciidoctor"
}

/* for rest docs */
ext {
    set('snippetsDir', file('build/generated-snippets'))
}

tasks.named("test") {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named("asciidoctor") {
    configurations 'asciidoctorExtensions'
    dependsOn test
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    sources {
        include '**/index.adoc'
    }
    baseDirFollowsSourceFile()
}

openApi {
    outputDir.set(file("$buildDir/docs"))
    outputFileName.set("swagger.yaml")
}

tasks.named("bootJar") {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "pplmo_blog-backend"
        property "sonar.organization", "pplmo"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

/* ====== specify DockerHub repo By Google JIB framework ====== */
// if logged on your local docker, you don't need to configure the following two global variable
// Or, you need configure them in gradle.properties and use them as follow.
if (!hasProperty('DOCKER_HUB_USERNAME') || !hasProperty('DOCKER_HUB_PASSWORD')) {
    jib.to.image = 'purplemystic/blog'
} else {
    jib {
        from {
            // Retrieves the base image from the Docker daemon.
            // image = "docker://openjdk:${sourceCompatibility}"
            image = "openjdk:${sourceCompatibility}"
        }
        to {
            image = "${DOCKER_HUB_USERNAME}/blog"
            auth {
                username = DOCKER_HUB_USERNAME // Defined in 'gradle.properties'.
                password = DOCKER_HUB_PASSWORD
            }
        }
    }
}
